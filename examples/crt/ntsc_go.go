// Code generated by file2byteslice. DO NOT EDIT.
// (gofmt is fine after generating)

package main

var ntsc_go = []byte("// +build shader\npackage main\n\nvar Time float\n\nfunc Distort(p vec2) vec2 {\n\t//theta := atan(p.y, p.x)\n\t//radius := pow(length(p), 1.1)\n\n\t//p.x = radius * cos(theta)\n\t//p.y = radius * sin(theta)\n\n\t//return 0.5 * (p + vec2(1.0, 1.0))\n\twarpX := 0.031\n\twarpY := 0.041\n\tp = p*2.0 - 1.0\n\tp *= vec2(1.0+(p.y*p.y)*warpX, 1.0+(p.x*p.x)*warpY)\n\tp.y += 0.5\n\tp.x += 0.51\n\treturn p*0.5 + 0.25\n}\n\nfunc get_color_bleeding(current_color vec4, color_left vec4) (vec4, vec4) {\n\tcolor_bleeding := 1.2\n\tcurrent_color = current_color * vec4(color_bleeding, 0.5, 1.0-color_bleeding, 1)\n\tcolor_left = color_left * vec4(1.0-color_bleeding, 0.5, color_bleeding, 1)\n\treturn current_color, color_left\n}\n\nfunc get_color_scanline(uv vec2, c vec4, time float) vec4 {\n\tscreen_height := 480.0\n\tscan_size := 2.0\n\tlines_velocity := 30.0\n\tscanline_alpha := 0.9\n\tlines_distance := 4.0\n\tline_row := floor((uv.y * screen_height / scan_size) + mod(time*lines_velocity, lines_distance))\n\tn := 1.0 - ceil((mod(line_row, lines_distance) / lines_distance))\n\tc = c - n*c*(1.0-scanline_alpha)\n\tc.a = 1.0\n\treturn c\n}\n\nfunc Fragment(position vec4, texCoord vec2, color vec4) vec4 {\n\txy := texCoord\n\txy = Distort(xy)\n\n\t/*d := length(xy)\n\tif d < 1.5 {\n\t\txy = Distort(xy)\n\t} else {\n\t\txy = texCoord\n\t}*/\n\n\tbleeding_range_x := 2.0\n\tbleeding_range_y := 2.0\n\tscreen_height := 480.0\n\tscreen_width := 640.0\n\n\tpixel_size_x := 1.0 / screen_width * bleeding_range_x\n\tpixel_size_y := 1.0 / screen_height * bleeding_range_y\n\tcolor_left := imageSrc0At(xy - vec2(pixel_size_x, pixel_size_y))\n\tcurrent_color := imageSrc0At(xy)\n\tcolor_left, current_color = get_color_bleeding(current_color, color_left)\n\tc := current_color + color_left\n\treturn get_color_scanline(xy, c, Time)\n}\n")
